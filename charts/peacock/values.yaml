logLevel: "info"

# Username use for interacting with Git
gitUser: ""
# Token for authenticating with Git
gitToken: ""
# Secret used for GitHub api
githubSecret: ""

# Token for authenticating with Slack
slackToken: ""

# URL to send webhooks object to
webhookUrl: ""
# Secret for authenticating the webhook
webhookSecret: ""
# Token for authenticating the message webhook
webhookToken: ""

# Existing secret to use for the service
serviceSecretName: ""

# Additional annotations & labels to be added to the peacock deployment
podAnnotations: {}
podsLabels: {}
deploymentLabels: {}

image:
  repository: "mqubeoss.azurecr.io/spring-financial-group/peacock"
  tag: 1.6.0
  pullPolicy: IfNotPresent

# optional list of image pull secrets to use to pull images
jx:
  # optional image pull secrets
  imagePullSecrets: []

  # whether to create a Release CRD when installing charts with Release CRDs included
  releaseCRD: true

# define environment variables here as a map of key: value
env:

service:
  name: peacock
  type: ClusterIP
  externalPort: 5000
  internalPort: 8080
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
  # Add labels to the service
  labels: {}

resources:
  limits:
    cpu: 250m
    memory: 500Mi
  requests:
    cpu: 150m
    memory: 250Mi

probePath: /health
livenessProbe:
  initialDelaySeconds: 60
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1
  # Optional distinct liveness probe path, if empty the probePath is used
  probePath: ""
readinessProbe:
  failureThreshold: 1
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1
  # Optional distinct readiness probe path, if empty the probePath is used
  probePath: ""

# custom ingress annotations on this service
ingress:
  annotations: {}
  # defaults to nginx if no other ingress class annotation specified
  classAnnotation: ""
  # Add labels to the ingress
  labels: {}

  # ingress path type
  pathType: ImplementationSpecific

serviceAccount:
  enabled: true
  name: ""
  annotations: {}
#    iam.gke.io/gcp-service-account: my-sa-in-gke
  # Add labels to the SA
  labels: {}
#    my-custom-label: value

# values we use from the `jx-requirements.yml` file if we are using helmfile and helm 3
jxRequirements:
  ingress:
    # shared ingress annotations on all services
    annotations: {}
    #  kubernetes.io/ingress.class: nginx

    apiVersion: "networking.k8s.io/v1"

    # the domain for hosts
    domain: ""
    externalDNS: false
    namespaceSubDomain: -jx.
    serviceType: ""
    tls:
      email: ""
      enabled: false
      production: false
      secretName: ""
