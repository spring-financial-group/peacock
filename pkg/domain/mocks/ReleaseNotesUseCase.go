// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "github.com/spring-financial-group/peacock/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// ReleaseNotesUseCase is an autogenerated mock type for the ReleaseNotesUseCase type
type ReleaseNotesUseCase struct {
	mock.Mock
}

// GenerateBreakdown provides a mock function with given fields: notes, hash, totalTeams
func (_m *ReleaseNotesUseCase) GenerateBreakdown(notes []models.ReleaseNote, hash string, totalTeams int) (string, error) {
	ret := _m.Called(notes, hash, totalTeams)

	if len(ret) == 0 {
		panic("no return value specified for GenerateBreakdown")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func([]models.ReleaseNote, string, int) (string, error)); ok {
		return rf(notes, hash, totalTeams)
	}
	if rf, ok := ret.Get(0).(func([]models.ReleaseNote, string, int) string); ok {
		r0 = rf(notes, hash, totalTeams)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func([]models.ReleaseNote, string, int) error); ok {
		r1 = rf(notes, hash, totalTeams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateHash provides a mock function with given fields: messages
func (_m *ReleaseNotesUseCase) GenerateHash(messages []models.ReleaseNote) (string, error) {
	ret := _m.Called(messages)

	if len(ret) == 0 {
		panic("no return value specified for GenerateHash")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func([]models.ReleaseNote) (string, error)); ok {
		return rf(messages)
	}
	if rf, ok := ret.Get(0).(func([]models.ReleaseNote) string); ok {
		r0 = rf(messages)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func([]models.ReleaseNote) error); ok {
		r1 = rf(messages)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarkdownFromReleaseNotes provides a mock function with given fields: notes
func (_m *ReleaseNotesUseCase) GetMarkdownFromReleaseNotes(notes []models.ReleaseNote) string {
	ret := _m.Called(notes)

	if len(ret) == 0 {
		panic("no return value specified for GetMarkdownFromReleaseNotes")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func([]models.ReleaseNote) string); ok {
		r0 = rf(notes)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetReleaseNotesFromMDAndTeams provides a mock function with given fields: markdown, teamsInFeathers
func (_m *ReleaseNotesUseCase) GetReleaseNotesFromMDAndTeams(markdown string, teamsInFeathers models.Teams) ([]models.ReleaseNote, error) {
	ret := _m.Called(markdown, teamsInFeathers)

	if len(ret) == 0 {
		panic("no return value specified for GetReleaseNotesFromMDAndTeams")
	}

	var r0 []models.ReleaseNote
	var r1 error
	if rf, ok := ret.Get(0).(func(string, models.Teams) ([]models.ReleaseNote, error)); ok {
		return rf(markdown, teamsInFeathers)
	}
	if rf, ok := ret.Get(0).(func(string, models.Teams) []models.ReleaseNote); ok {
		r0 = rf(markdown, teamsInFeathers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ReleaseNote)
		}
	}

	if rf, ok := ret.Get(1).(func(string, models.Teams) error); ok {
		r1 = rf(markdown, teamsInFeathers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendReleaseNotes provides a mock function with given fields: subject, notes
func (_m *ReleaseNotesUseCase) SendReleaseNotes(subject string, notes []models.ReleaseNote) error {
	ret := _m.Called(subject, notes)

	if len(ret) == 0 {
		panic("no return value specified for SendReleaseNotes")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []models.ReleaseNote) error); ok {
		r0 = rf(subject, notes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewReleaseNotesUseCase creates a new instance of ReleaseNotesUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReleaseNotesUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReleaseNotesUseCase {
	mock := &ReleaseNotesUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
