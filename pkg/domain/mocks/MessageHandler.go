// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "github.com/spring-financial-group/peacock/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// MessageHandler is an autogenerated mock type for the MessageHandler type
type MessageHandler struct {
	mock.Mock
}

// IsInitialised provides a mock function with given fields: contactType
func (_m *MessageHandler) IsInitialised(contactType string) bool {
	ret := _m.Called(contactType)

	if len(ret) == 0 {
		panic("no return value specified for IsInitialised")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(contactType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SendReleaseNotes provides a mock function with given fields: subject, notes
func (_m *MessageHandler) SendReleaseNotes(subject string, notes []models.ReleaseNote) error {
	ret := _m.Called(subject, notes)

	if len(ret) == 0 {
		panic("no return value specified for SendReleaseNotes")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []models.ReleaseNote) error); ok {
		r0 = rf(subject, notes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMessageHandler creates a new instance of MessageHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageHandler {
	mock := &MessageHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
