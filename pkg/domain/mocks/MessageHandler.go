// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	feathers "github.com/spring-financial-group/peacock/pkg/feathers"
	message "github.com/spring-financial-group/peacock/pkg/message"

	mock "github.com/stretchr/testify/mock"
)

// MessageHandler is an autogenerated mock type for the MessageHandler type
type MessageHandler struct {
	mock.Mock
}

// IsInitialised provides a mock function with given fields: contactType
func (_m *MessageHandler) IsInitialised(contactType string) bool {
	ret := _m.Called(contactType)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(contactType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SendMessages provides a mock function with given fields: _a0, messages
func (_m *MessageHandler) SendMessages(_a0 *feathers.Feathers, messages []message.Message) error {
	ret := _m.Called(_a0, messages)

	var r0 error
	if rf, ok := ret.Get(0).(func(*feathers.Feathers, []message.Message) error); ok {
		r0 = rf(_a0, messages)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMessageHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewMessageHandler creates a new instance of MessageHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMessageHandler(t mockConstructorTestingTNewMessageHandler) *MessageHandler {
	mock := &MessageHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
