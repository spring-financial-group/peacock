// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	github "github.com/google/go-github/v48/github"
	domain "github.com/spring-financial-group/peacock/pkg/domain"

	mock "github.com/stretchr/testify/mock"
)

// SCM is an autogenerated mock type for the SCM type
type SCM struct {
	mock.Mock
}

// CommentError provides a mock function with given fields: ctx, repoName, prNumber, prOwner, err
func (_m *SCM) CommentError(ctx context.Context, repoName string, prNumber int, prOwner string, err error) error {
	ret := _m.Called(ctx, repoName, prNumber, prOwner, err)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, string, error) error); ok {
		r0 = rf(ctx, repoName, prNumber, prOwner, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommentOnPR provides a mock function with given fields: ctx, repoName, prNumber, body
func (_m *SCM) CommentOnPR(ctx context.Context, repoName string, prNumber int, body string) error {
	ret := _m.Called(ctx, repoName, prNumber, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, string) error); ok {
		r0 = rf(ctx, repoName, prNumber, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePeacockCommitStatus provides a mock function with given fields: ctx, repoName, ref, state, statusContext
func (_m *SCM) CreatePeacockCommitStatus(ctx context.Context, repoName string, ref string, state domain.State, statusContext string) error {
	ret := _m.Called(ctx, repoName, ref, state, statusContext)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, domain.State, string) error); ok {
		r0 = rf(ctx, repoName, ref, state, statusContext)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUsersComments provides a mock function with given fields: ctx, repoName, prNumber
func (_m *SCM) DeleteUsersComments(ctx context.Context, repoName string, prNumber int) error {
	ret := _m.Called(ctx, repoName, prNumber)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, repoName, prNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFileFromBranch provides a mock function with given fields: ctx, repoName, branch, path
func (_m *SCM) GetFileFromBranch(ctx context.Context, repoName string, branch string, path string) ([]byte, error) {
	ret := _m.Called(ctx, repoName, branch, path)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []byte); ok {
		r0 = rf(ctx, repoName, branch, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, repoName, branch, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestCommitSHAInBranch provides a mock function with given fields: ctx, repoName, branch
func (_m *SCM) GetLatestCommitSHAInBranch(ctx context.Context, repoName string, branch string) (string, error) {
	ret := _m.Called(ctx, repoName, branch)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, repoName, branch)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, repoName, branch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPRComments provides a mock function with given fields: ctx, repoName, prNumber
func (_m *SCM) GetPRComments(ctx context.Context, repoName string, prNumber int) ([]*github.IssueComment, error) {
	ret := _m.Called(ctx, repoName, prNumber)

	var r0 []*github.IssueComment
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []*github.IssueComment); ok {
		r0 = rf(ctx, repoName, prNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.IssueComment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, repoName, prNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPRCommentsByUser provides a mock function with given fields: ctx, repoName, prNumber
func (_m *SCM) GetPRCommentsByUser(ctx context.Context, repoName string, prNumber int) ([]*github.IssueComment, error) {
	ret := _m.Called(ctx, repoName, prNumber)

	var r0 []*github.IssueComment
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []*github.IssueComment); ok {
		r0 = rf(ctx, repoName, prNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.IssueComment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, repoName, prNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPullRequestBodyFromCommit provides a mock function with given fields: ctx, repoName, sha
func (_m *SCM) GetPullRequestBodyFromCommit(ctx context.Context, repoName string, sha string) (*string, error) {
	ret := _m.Called(ctx, repoName, sha)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *string); ok {
		r0 = rf(ctx, repoName, sha)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, repoName, sha)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPullRequestBodyFromPRNumber provides a mock function with given fields: ctx, repoName, prNumber
func (_m *SCM) GetPullRequestBodyFromPRNumber(ctx context.Context, repoName string, prNumber int) (*string, error) {
	ret := _m.Called(ctx, repoName, prNumber)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *string); ok {
		r0 = rf(ctx, repoName, prNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, repoName, prNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleError provides a mock function with given fields: ctx, statusContext, repoName, prNumber, headSHA, prOwner, err
func (_m *SCM) HandleError(ctx context.Context, statusContext string, repoName string, prNumber int, headSHA string, prOwner string, err error) error {
	ret := _m.Called(ctx, statusContext, repoName, prNumber, headSHA, prOwner, err)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, string, string, error) error); ok {
		r0 = rf(ctx, statusContext, repoName, prNumber, headSHA, prOwner, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSCM interface {
	mock.TestingT
	Cleanup(func())
}

// NewSCM creates a new instance of SCM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSCM(t mockConstructorTestingTNewSCM) *SCM {
	mock := &SCM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
