// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/spring-financial-group/peacock/pkg/models"

	time "time"
)

// ReleaseUseCase is an autogenerated mock type for the ReleaseUseCase type
type ReleaseUseCase struct {
	mock.Mock
}

// GetReleasesAfterDate provides a mock function with given fields: ctx, environment, startTime
func (_m *ReleaseUseCase) GetReleasesAfterDate(ctx context.Context, environment string, startTime time.Time) ([]models.Release, error) {
	ret := _m.Called(ctx, environment, startTime)

	if len(ret) == 0 {
		panic("no return value specified for GetReleasesAfterDate")
	}

	var r0 []models.Release
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) ([]models.Release, error)); ok {
		return rf(ctx, environment, startTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) []models.Release); ok {
		r0 = rf(ctx, environment, startTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = rf(ctx, environment, startTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveRelease provides a mock function with given fields: ctx, environment, releaseNotes
func (_m *ReleaseUseCase) SaveRelease(ctx context.Context, environment string, releaseNotes []models.ReleaseNote) error {
	ret := _m.Called(ctx, environment, releaseNotes)

	if len(ret) == 0 {
		panic("no return value specified for SaveRelease")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []models.ReleaseNote) error); ok {
		r0 = rf(ctx, environment, releaseNotes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewReleaseUseCase creates a new instance of ReleaseUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReleaseUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReleaseUseCase {
	mock := &ReleaseUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
